#!/bin/sh
set -e

check_user=pgpool
check_password=thisisabadpassword


#header
cat << EOF
#Auto-generated by pgpool/config.sh, do not modify
listen_addresses = '*'
port = 5432
pcp_port = 9898
pcp_socket_dir = '/tmp'
insert_lock = off
load_balance_mode = on
master_slave_mode = on
master_slave_sub_mode = 'stream'
allow_sql_comments = on
enable_pool_hba = on
black_function_list = '$BLACK'
#used to determine that the first server is the master
#CREATE ROLE pgpool WITH LOGIN PASSWORD 'secret';
#GRANT CONNECT ON DATABASE db TO pgpool;
sr_check_user = '$check_user'
sr_check_password = '$check_password'
sr_check_database = '$APP_PROFILE'

EOF


aws rds describe-db-instances --region eu-west-1 |
jq -r ".DBInstances | ( #it's the only object in there
	map(select(.DBInstanceIdentifier == \"$APP_PROFILE\")) +
	map(select(.ReadReplicaSourceDBInstanceIdentifier == \"$APP_PROFILE\")) ) |
	#get their addresses
	map(.Endpoint.Address) |
	#convert the output array to multiple results (in conjunction with -r)
	.[]" |
while read -r server; do
#no indentation, otherwise `<< EOF` doesn't work
#first generate a sequence number
if [ -z "$i" ]; then
	i=0
else
	i=$((i+1))
fi
#then emit the corresponding stanza
cat << EOF

backend_hostname$i = '$server'
backend_port$i = 5432
backend_weight$i = 1
backend_flag$i = 'ALLOW_TO_FAILOVER'
EOF
done
