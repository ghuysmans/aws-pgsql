#TODO share one single load balancer
AWSTemplateFormatVersion: 2010-09-09
Description: Database load balancing
Parameters:
  Count:
    Type: Number
    Description: "Number of pgpool instances"
  Environment:
    Type: String
    Default: alpha
    AllowedValues: ["alpha", "beta", "heroes"]
    Description: Environment
  ImageTag:
    Type: String
    Description: Tag of the Docker images
  RepositoryURI:
    Type: String
    Default: 449128836998.dkr.ecr.eu-west-1.amazonaws.com/
    Description: Address of the Docker repository.
  WriteFunctions:
    Type: String
    Description: Comma-separated list of functions writing to the database
  Database:
    Type: String
    Default: bs
    Description: PostgreSQL database name
Resources:
  DbBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets: !Split [",", !ImportValue SubnetIDs]
  DbTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Sub "${RepositoryURI}pgpool:${ImageTag}"
          Command: ["sh", "run.sh"]
          Memory: 70
          Name: db
          PortMappings: [ContainerPort: 5432]
          Environment:
            - {Name: "APP_PROFILE", Value: !Ref Environment}
            - {Name: "CONFIG", Value: !ImportValue ConfigurationS3Bucket}
            - {Name: "BLACK", Value: !Ref WriteFunctions}
            - {Name: "DB", Value: !Ref Database}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Sub "${Environment}/db"
              awslogs-stream-prefix: !Sub "${AWS::StackName}"
      TaskRoleArn:
        !Ref DbRole
  DbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: {Service: ["ecs-tasks.amazonaws.com"]}
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: get-db-instances
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "rds:DescribeDBInstances"
                Resource: "*"
        #FIXME? http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
        - PolicyName: get-config-information
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource:
                  !Sub
                  - "arn:aws:s3:::${Bucket}/${Environment}*"
                  - {Bucket: !ImportValue ConfigurationS3Bucket}
  DbService:
    Type: AWS::ECS::Service
    DependsOn: [DbListener]
    Properties:
      Cluster: !ImportValue Cluster
      DesiredCount: !Ref Count
      PlacementConstraints: [{Type: distinctInstance}]
      TaskDefinition: !Ref DbTask
      Role: !ImportValue ECSServiceRole
      LoadBalancers:
        - ContainerName: db
          ContainerPort: 5432
          TargetGroupArn: !Ref DbTargetGroup
  DbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref DbBalancer
      Port: 5432
      Protocol: TCP
  DbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5432
      Protocol: TCP
      HealthCheckProtocol: TCP
      VpcId: !ImportValue VpcId
Outputs:
  DbRole:
    Value: !Ref DbRole
    Export: {Name: !Sub "${Environment}-DbRole"}
